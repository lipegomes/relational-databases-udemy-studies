-- MySQL Script generated by MySQL Workbench
-- Thu 05 Aug 2021 03:13:09 PM -03
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema universidade_u
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema universidade_u
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `universidade_u` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `universidade_u` ;

-- -----------------------------------------------------
-- Table `universidade_u`.`aluno`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universidade_u`.`aluno` (
  `id_aluno` INT NOT NULL AUTO_INCREMENT,
  `cpf` VARCHAR(14) NOT NULL,
  `sexo` CHAR(1) NOT NULL,
  `nome` VARCHAR(100) NOT NULL,
  `email` VARCHAR(150) NOT NULL,
  `data_nascimento` DATE NOT NULL,
  `ativo_sn` INT NULL DEFAULT '1',
  PRIMARY KEY (`id_aluno`),
  UNIQUE INDEX `uc_aluno_cpf` (`cpf` ASC) VISIBLE,
  UNIQUE INDEX `uc_aluno_email` (`email` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 12
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `universidade_u`.`curso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universidade_u`.`curso` (
  `id_curso` INT NOT NULL AUTO_INCREMENT,
  `descricao` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`id_curso`))
ENGINE = InnoDB
AUTO_INCREMENT = 10
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `universidade_u`.`aluno_curso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universidade_u`.`aluno_curso` (
  `fk_id_aluno` INT NOT NULL,
  `fk_id_curso` INT NOT NULL,
  `data_inscricao_curso` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `valor_pago_curso` FLOAT(10,2) NULL DEFAULT NULL,
  PRIMARY KEY (`fk_id_aluno`, `fk_id_curso`, `data_inscricao_curso`),
  INDEX `fk_aluno_curso` (`fk_id_aluno` ASC) VISIBLE,
  INDEX `fk_curso_aluno` (`fk_id_curso` ASC) VISIBLE,
  CONSTRAINT `fk_aluno_curso`
    FOREIGN KEY (`fk_id_aluno`)
    REFERENCES `universidade_u`.`aluno` (`id_aluno`),
  CONSTRAINT `fk_curso_aluno`
    FOREIGN KEY (`fk_id_curso`)
    REFERENCES `universidade_u`.`curso` (`id_curso`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `universidade_u`.`calendario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universidade_u`.`calendario` (
  `id_calendario` INT NOT NULL AUTO_INCREMENT,
  `data` DATE NOT NULL,
  `dia` INT NOT NULL,
  `mes` INT NOT NULL,
  `ano` INT NOT NULL,
  `feriado` ENUM('s', 'n') NULL DEFAULT NULL,
  `nome_feriado` VARCHAR(50) NULL DEFAULT NULL,
  PRIMARY KEY (`id_calendario`))
ENGINE = InnoDB
AUTO_INCREMENT = 366
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `universidade_u`.`professor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universidade_u`.`professor` (
  `id_professor` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(50) NOT NULL,
  `email` VARCHAR(100) NULL DEFAULT NULL,
  PRIMARY KEY (`id_professor`))
ENGINE = InnoDB
AUTO_INCREMENT = 482
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `universidade_u`.`disciplina`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universidade_u`.`disciplina` (
  `id_disciplina` INT NOT NULL AUTO_INCREMENT,
  `descricao` VARCHAR(50) NOT NULL,
  `carga_horaria` INT NULL DEFAULT NULL,
  `fk_id_professor` INT NULL DEFAULT NULL,
  `fk_id_curso` INT NULL DEFAULT NULL,
  PRIMARY KEY (`id_disciplina`),
  INDEX `fk_curso_disciplina` (`fk_id_curso` ASC) VISIBLE,
  INDEX `fk_disciplina_professor` (`fk_id_professor` ASC) VISIBLE,
  CONSTRAINT `fk_curso_disciplina`
    FOREIGN KEY (`fk_id_curso`)
    REFERENCES `universidade_u`.`curso` (`id_curso`),
  CONSTRAINT `fk_disciplina_professor`
    FOREIGN KEY (`fk_id_professor`)
    REFERENCES `universidade_u`.`professor` (`id_professor`))
ENGINE = InnoDB
AUTO_INCREMENT = 12
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `universidade_u`.`endereco`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universidade_u`.`endereco` (
  `id_endereco` INT NOT NULL AUTO_INCREMENT,
  `logradouro` VARCHAR(100) NOT NULL,
  `numero` VARCHAR(10) NOT NULL,
  `complemento` VARCHAR(20) NULL DEFAULT NULL,
  `bairro` VARCHAR(100) NOT NULL,
  `cidade` VARCHAR(50) NOT NULL,
  `estado` CHAR(2) NOT NULL,
  `fk_id_aluno` INT NOT NULL,
  PRIMARY KEY (`id_endereco`),
  UNIQUE INDEX `uc_endereco_fk_id_aluno` (`fk_id_aluno` ASC) VISIBLE,
  CONSTRAINT `fk_aluno_enredeco`
    FOREIGN KEY (`fk_id_aluno`)
    REFERENCES `universidade_u`.`aluno` (`id_aluno`))
ENGINE = InnoDB
AUTO_INCREMENT = 9
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `universidade_u`.`funcionario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universidade_u`.`funcionario` (
  `id_matricula` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(50) NOT NULL,
  `funcao` VARCHAR(50) NOT NULL,
  `telefone` VARCHAR(20) NULL DEFAULT NULL,
  `fk_id_matricula_supervisor` INT NULL DEFAULT NULL,
  PRIMARY KEY (`id_matricula`),
  INDEX `fk_funcionario_supervisor` (`fk_id_matricula_supervisor` ASC) VISIBLE,
  CONSTRAINT `fk_funcionario_supervisor`
    FOREIGN KEY (`fk_id_matricula_supervisor`)
    REFERENCES `universidade_u`.`funcionario` (`id_matricula`))
ENGINE = InnoDB
AUTO_INCREMENT = 314
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `universidade_u`.`gasto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universidade_u`.`gasto` (
  `id_gasto` INT NOT NULL AUTO_INCREMENT,
  `ano` INT NOT NULL,
  `tipo` ENUM('previsto', 'realizado') NOT NULL,
  `jan` FLOAT(10,2) NULL DEFAULT NULL,
  `fev` FLOAT(10,2) NULL DEFAULT NULL,
  `mar` FLOAT(10,2) NULL DEFAULT NULL,
  `abr` FLOAT(10,2) NULL DEFAULT NULL,
  `mai` FLOAT(10,2) NULL DEFAULT NULL,
  `jun` FLOAT(10,2) NULL DEFAULT NULL,
  `jul` FLOAT(10,2) NULL DEFAULT NULL,
  `ago` FLOAT(10,2) NULL DEFAULT NULL,
  `set` FLOAT(10,2) NULL DEFAULT NULL,
  `out` FLOAT(10,2) NULL DEFAULT NULL,
  `nov` FLOAT(10,2) NULL DEFAULT NULL,
  `dez` FLOAT(10,2) NULL DEFAULT NULL,
  PRIMARY KEY (`id_gasto`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `universidade_u`.`log`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universidade_u`.`log` (
  `id_log` INT NOT NULL AUTO_INCREMENT,
  `log` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`id_log`))
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `universidade_u`.`projeto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universidade_u`.`projeto` (
  `id_codigo` INT NOT NULL AUTO_INCREMENT,
  `data_criacao` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `nome` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id_codigo`))
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `universidade_u`.`projeto_funcionario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universidade_u`.`projeto_funcionario` (
  `fk_id_codigo` INT NOT NULL,
  `fk_id_matricula` INT NOT NULL,
  `horas_estimadas` INT NOT NULL,
  `horas_realizadas` INT NULL DEFAULT NULL,
  PRIMARY KEY (`fk_id_codigo`, `fk_id_matricula`),
  INDEX `fk_id_matricula` (`fk_id_matricula` ASC) VISIBLE,
  CONSTRAINT `projeto_funcionario_ibfk_1`
    FOREIGN KEY (`fk_id_codigo`)
    REFERENCES `universidade_u`.`projeto` (`id_codigo`),
  CONSTRAINT `projeto_funcionario_ibfk_2`
    FOREIGN KEY (`fk_id_matricula`)
    REFERENCES `universidade_u`.`funcionario` (`id_matricula`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb3;


-- -----------------------------------------------------
-- Table `universidade_u`.`telefone`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universidade_u`.`telefone` (
  `id_telefone` INT NOT NULL AUTO_INCREMENT,
  `numero` VARCHAR(20) NOT NULL,
  `fk_id_aluno` INT NOT NULL,
  `tipo` ENUM('res', 'com', 'cel') NOT NULL,
  PRIMARY KEY (`id_telefone`),
  INDEX `fk_aluno_telefone` (`fk_id_aluno` ASC) VISIBLE,
  CONSTRAINT `fk_aluno_telefone`
    FOREIGN KEY (`fk_id_aluno`)
    REFERENCES `universidade_u`.`aluno` (`id_aluno`))
ENGINE = InnoDB
AUTO_INCREMENT = 19
DEFAULT CHARACTER SET = utf8mb3;

USE `universidade_u` ;

-- -----------------------------------------------------
-- procedure proc_calendario
-- -----------------------------------------------------

DELIMITER $$
USE `universidade_u`$$
CREATE DEFINER=`root`@`%` PROCEDURE `proc_calendario`(in p_data_inicio date, in p_data_fim date)
    COMMENT 'Definição do calendário acadêmico com base em uma data de início e fim'
begin
	
	declare v_dia, v_mes int(2);
	declare v_ano int(4);

	# select p_data_inicio as data_inicio, p_data_fim as data_fim;

	while p_data_inicio <= p_data_fim do
	
		set v_dia = extract(day from p_data_inicio);
		set v_mes = extract(month from p_data_inicio);
		set v_ano = extract(year from p_data_inicio);
		
		insert into calendario(`data`, dia, mes, ano)values(p_data_inicio, v_dia, v_mes, v_ano);
		set p_data_inicio = date_add(p_data_inicio, interval 1 day);
	
	end while;
	
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_case
-- -----------------------------------------------------

DELIMITER $$
USE `universidade_u`$$
CREATE DEFINER=`root`@`%` PROCEDURE `proc_case`()
    COMMENT 'Usando case em uma estrutura de decisão'
begin
	declare opcao int default 1;
	/* sintaxe simples */
	case opcao
		when 1 then select 'pedra';
		when 2 then select 'papel';
		when 3 then select 'tesoura';
		else
			select "Para jogar é necessário utilizar gestos de pedra, papel ou tesoura";
	end case;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_case2
-- -----------------------------------------------------

DELIMITER $$
USE `universidade_u`$$
CREATE DEFINER=`root`@`%` PROCEDURE `proc_case2`()
    COMMENT 'Usando case em uma estrutura de decisão'
begin
	declare opcao int default 0;
	/* sintaxe alternativa */
	case
		when opcao = 1 then select 'pedra';
		when opcao = 2 then select 'papel';
		when opcao = 3 then select 'tesoura';
		else
			select "Para jogar é necessário utilizar gestos de pedra, papel ou tesoura";
	end case;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_case_data
-- -----------------------------------------------------

DELIMITER $$
USE `universidade_u`$$
CREATE DEFINER=`root`@`%` PROCEDURE `proc_case_data`()
    COMMENT 'Usando case em uma estrutura de decisão'
begin
	declare data_teste date;
	set data_teste = curdate();
	/* sintaxe alternativa */
	case
		when data_teste = curdate() then select curdate() as 'Data atual', data_teste, 'Presente';
		when data_teste < curdate() then select curdate() as 'Data atual', data_teste, 'Passado';
		when data_teste > curdate() then select curdate() as 'Data atual', data_teste, 'Futuro';
		else
			select "Nenhuma das opções anteriores";
	end case;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_exemplo_parametros
-- -----------------------------------------------------

DELIMITER $$
USE `universidade_u`$$
CREATE DEFINER=`root`@`%` PROCEDURE `proc_exemplo_parametros`(
	/* Parâmetro de entrada */
	in param1 int,
	/* Parâmetro de saída */
	out param2 varchar(50),
	/* Acumula os parâmetros de entrada e saída permitindo alterar o valor da variável de sessão */
	inout param3 float(3,1)
)
begin
	select param1, param2, param3;
	set param2 = 'O parâmetro 2 foi modificado';
	set param3 = 11.7;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_exemplo_parametros2
-- -----------------------------------------------------

DELIMITER $$
USE `universidade_u`$$
CREATE DEFINER=`root`@`%` PROCEDURE `proc_exemplo_parametros2`(
	/* Parâmetro de entrada */
	in param1 int,
	/* Parâmetro de saída */
	out param2 varchar(50),
	/* Acumula os parâmetros de entrada e saída permitindo alterar o valor da variável de sessão */
	inout param3 float(3,1)
)
begin
	select param1, param2, param3;

	set param2 = 'O parâmetro 2 foi modificado';
	set param3 = 2021;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_ifelse
-- -----------------------------------------------------

DELIMITER $$
USE `universidade_u`$$
CREATE DEFINER=`root`@`%` PROCEDURE `proc_ifelse`()
    COMMENT 'Usando condicionais ifelse'
begin
	declare idade int default 17;
 	declare sexo char(1) default 'M';
 
	if idade >= 18 and sexo = 'M' THEN
		select 'Usuário maior de idade do sexo masculino';
	end if;

	if idade < 18 and sexo = 'M' THEN
		select 'Usuário menor de idade do sexo masculino';
	end if;

	if idade >= 18 and sexo = 'F' THEN
		select 'Usuário maior de idade do sexo feminino';
	end if;

	if idade < 18 and sexo = 'F' THEN
		select 'Usuário menor de idade do sexo feminino';
	end if;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_ifelse_aluno
-- -----------------------------------------------------

DELIMITER $$
USE `universidade_u`$$
CREATE DEFINER=`root`@`%` PROCEDURE `proc_ifelse_aluno`()
    COMMENT 'Usando if else para retornar um ou mais alunos'
begin
	if (select sexo from aluno where id_aluno = 2) = 'M' THEN
		select 'Aluno do sexo masculino';
	else
		select 'Aluno do sexo feminino';
	end if;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_ifelse_pessoa
-- -----------------------------------------------------

DELIMITER $$
USE `universidade_u`$$
CREATE DEFINER=`root`@`%` PROCEDURE `proc_ifelse_pessoa`()
    COMMENT 'Usando if else para retornar uma pessoa em função da faixa etária'
begin
	
	declare idade int;
	
	set idade = (select
		timestampdiff(year, data_nascimento, curdate())
	from
		aluno
	where
		id_aluno = 7);

	if idade >= 0 and idade <= 15 THEN
		select 'Criança';
	elseif idade > 15 and idade <= 29 THEN
		select 'Jovem';
	elseif idade > 29 and idade <= 59 THEN
		select 'Adulto';
	else
		select 'Idoso';
	end if;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_loop
-- -----------------------------------------------------

DELIMITER $$
USE `universidade_u`$$
CREATE DEFINER=`root`@`%` PROCEDURE `proc_loop`()
    COMMENT 'Usando loop em uma estrutura de iteraçao do laço de repetição'
begin

	declare z int default 1;
	declare resultado varchar(20);
	
	loop_tabuada: loop
		set resultado = concat('2 x ', z, ' = ', (2*z));
		/* armazena resultado da tabuada do número 2 na tabela log */
		insert into log(log)value(resultado);
		set z = z + 1;
		if z > 10  then
			leave loop_tabuada;
		end if;
		
	end loop loop_tabuada;
		
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_repeat
-- -----------------------------------------------------

DELIMITER $$
USE `universidade_u`$$
CREATE DEFINER=`root`@`%` PROCEDURE `proc_repeat`()
    COMMENT 'Usando o repeat em uma estrutura de repetição'
begin
	
	declare z int default 1;
	declare resultado varchar(20);
	
	repeat
		set resultado = concat('5 x ', z, ' = ', (5*z));
		/* armazena resultado da tabuada do número 5 na tabela log */
		insert into log(log)value(resultado);
		set z = z + 1;
	until z > 10 end repeat;

end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_resumo
-- -----------------------------------------------------

DELIMITER $$
USE `universidade_u`$$
CREATE DEFINER=`root`@`%` PROCEDURE `proc_resumo`(out total_professores int, out total_alunos int)
    COMMENT 'Resumo do total de alunos e professores'
begin
	/* total de professores */
	select count(*) from professor;
	/* total de alunos */
	select count(*) from aluno;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_variaveis_escopo_local1
-- -----------------------------------------------------

DELIMITER $$
USE `universidade_u`$$
CREATE DEFINER=`root`@`%` PROCEDURE `proc_variaveis_escopo_local1`()
begin
	declare x int default 10;
select x as variavel_escopo_local;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_variaveis_escopo_local2
-- -----------------------------------------------------

DELIMITER $$
USE `universidade_u`$$
CREATE DEFINER=`root`@`%` PROCEDURE `proc_variaveis_escopo_local2`()
begin
	declare y int default 7;
	declare arara float(5,2);

	set arara = 0.90;

	select arara as variavel_escopo_local2;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_variaveis_escopo_local3
-- -----------------------------------------------------

DELIMITER $$
USE `universidade_u`$$
CREATE DEFINER=`root`@`%` PROCEDURE `proc_variaveis_escopo_local3`()
begin
	declare total_professores int;

	# set total_professores = (select count(*) from professor);
	select count(*) into total_professores from professor;
	select total_professores as 'Total professores';
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_variaveis_escopo_parametro
-- -----------------------------------------------------

DELIMITER $$
USE `universidade_u`$$
CREATE DEFINER=`root`@`%` PROCEDURE `proc_variaveis_escopo_parametro`(param1 int, out param2 varchar(100))
begin
	select param1, param2;
	set param2 = 'O parâmetro 2 foi modificado e exportado pela procedure';
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_while
-- -----------------------------------------------------

DELIMITER $$
USE `universidade_u`$$
CREATE DEFINER=`root`@`%` PROCEDURE `proc_while`()
    COMMENT 'Usando while em uma estrutura de iteraçao do laço de repetição'
begin
		
	declare contador int default 1;

	while contador < 10 do
		insert into log(log)values(contador);
		set contador = contador + 1;
	end while;
		
end$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
